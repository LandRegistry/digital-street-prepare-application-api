# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.language import Language  # noqa: F401,E501
from swagger_server.models.schedule_info import ScheduleInfo  # noqa: F401,E501
from swagger_server.models.sub_register import SubRegister  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class RegisterEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sub_register_code: SubRegister=None, sub_register_sequence: int=None, schedule: ScheduleInfo=None, entry_sequence: int=None, role_code: str=None, entry_date: date=None, language_code: Language=None, draft_entry_version: int=None, draft_entry_code: str=None, legacy_entry_id: str=None, priority_timestamp: datetime=None, entry_text: str=None):  # noqa: E501
        """RegisterEntry - a model defined in Swagger

        :param sub_register_code: The sub_register_code of this RegisterEntry.  # noqa: E501
        :type sub_register_code: SubRegister
        :param sub_register_sequence: The sub_register_sequence of this RegisterEntry.  # noqa: E501
        :type sub_register_sequence: int
        :param schedule: The schedule of this RegisterEntry.  # noqa: E501
        :type schedule: ScheduleInfo
        :param entry_sequence: The entry_sequence of this RegisterEntry.  # noqa: E501
        :type entry_sequence: int
        :param role_code: The role_code of this RegisterEntry.  # noqa: E501
        :type role_code: str
        :param entry_date: The entry_date of this RegisterEntry.  # noqa: E501
        :type entry_date: date
        :param language_code: The language_code of this RegisterEntry.  # noqa: E501
        :type language_code: Language
        :param draft_entry_version: The draft_entry_version of this RegisterEntry.  # noqa: E501
        :type draft_entry_version: int
        :param draft_entry_code: The draft_entry_code of this RegisterEntry.  # noqa: E501
        :type draft_entry_code: str
        :param legacy_entry_id: The legacy_entry_id of this RegisterEntry.  # noqa: E501
        :type legacy_entry_id: str
        :param priority_timestamp: The priority_timestamp of this RegisterEntry.  # noqa: E501
        :type priority_timestamp: datetime
        :param entry_text: The entry_text of this RegisterEntry.  # noqa: E501
        :type entry_text: str
        """
        self.swagger_types = {
            'sub_register_code': SubRegister,
            'sub_register_sequence': int,
            'schedule': ScheduleInfo,
            'entry_sequence': int,
            'role_code': str,
            'entry_date': date,
            'language_code': Language,
            'draft_entry_version': int,
            'draft_entry_code': str,
            'legacy_entry_id': str,
            'priority_timestamp': datetime,
            'entry_text': str
        }

        self.attribute_map = {
            'sub_register_code': 'sub_register_code',
            'sub_register_sequence': 'sub_register_sequence',
            'schedule': 'schedule',
            'entry_sequence': 'entry_sequence',
            'role_code': 'role_code',
            'entry_date': 'entry_date',
            'language_code': 'language_code',
            'draft_entry_version': 'draft_entry_version',
            'draft_entry_code': 'draft_entry_code',
            'legacy_entry_id': 'legacy_entry_id',
            'priority_timestamp': 'priority_timestamp',
            'entry_text': 'entry_text'
        }
        self._sub_register_code = sub_register_code
        self._sub_register_sequence = sub_register_sequence
        self._schedule = schedule
        self._entry_sequence = entry_sequence
        self._role_code = role_code
        self._entry_date = entry_date
        self._language_code = language_code
        self._draft_entry_version = draft_entry_version
        self._draft_entry_code = draft_entry_code
        self._legacy_entry_id = legacy_entry_id
        self._priority_timestamp = priority_timestamp
        self._entry_text = entry_text

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegisterEntry of this RegisterEntry.  # noqa: E501
        :rtype: RegisterEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_register_code(self) -> SubRegister:
        """Gets the sub_register_code of this RegisterEntry.


        :return: The sub_register_code of this RegisterEntry.
        :rtype: SubRegister
        """
        return self._sub_register_code

    @sub_register_code.setter
    def sub_register_code(self, sub_register_code: SubRegister):
        """Sets the sub_register_code of this RegisterEntry.


        :param sub_register_code: The sub_register_code of this RegisterEntry.
        :type sub_register_code: SubRegister
        """

        self._sub_register_code = sub_register_code

    @property
    def sub_register_sequence(self) -> int:
        """Gets the sub_register_sequence of this RegisterEntry.

        The position of the entry within its sub register (or schedule, if specified).  # noqa: E501

        :return: The sub_register_sequence of this RegisterEntry.
        :rtype: int
        """
        return self._sub_register_sequence

    @sub_register_sequence.setter
    def sub_register_sequence(self, sub_register_sequence: int):
        """Sets the sub_register_sequence of this RegisterEntry.

        The position of the entry within its sub register (or schedule, if specified).  # noqa: E501

        :param sub_register_sequence: The sub_register_sequence of this RegisterEntry.
        :type sub_register_sequence: int
        """

        self._sub_register_sequence = sub_register_sequence

    @property
    def schedule(self) -> ScheduleInfo:
        """Gets the schedule of this RegisterEntry.


        :return: The schedule of this RegisterEntry.
        :rtype: ScheduleInfo
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: ScheduleInfo):
        """Sets the schedule of this RegisterEntry.


        :param schedule: The schedule of this RegisterEntry.
        :type schedule: ScheduleInfo
        """

        self._schedule = schedule

    @property
    def entry_sequence(self) -> int:
        """Gets the entry_sequence of this RegisterEntry.

        The position of the entry within the entire register.  # noqa: E501

        :return: The entry_sequence of this RegisterEntry.
        :rtype: int
        """
        return self._entry_sequence

    @entry_sequence.setter
    def entry_sequence(self, entry_sequence: int):
        """Sets the entry_sequence of this RegisterEntry.

        The position of the entry within the entire register.  # noqa: E501

        :param entry_sequence: The entry_sequence of this RegisterEntry.
        :type entry_sequence: int
        """

        self._entry_sequence = entry_sequence

    @property
    def role_code(self) -> str:
        """Gets the role_code of this RegisterEntry.

        A four-character code that identifies the role that an entry fulfills within the register.  # noqa: E501

        :return: The role_code of this RegisterEntry.
        :rtype: str
        """
        return self._role_code

    @role_code.setter
    def role_code(self, role_code: str):
        """Sets the role_code of this RegisterEntry.

        A four-character code that identifies the role that an entry fulfills within the register.  # noqa: E501

        :param role_code: The role_code of this RegisterEntry.
        :type role_code: str
        """

        self._role_code = role_code

    @property
    def entry_date(self) -> date:
        """Gets the entry_date of this RegisterEntry.

        The date on which the entry was added to the register.  # noqa: E501

        :return: The entry_date of this RegisterEntry.
        :rtype: date
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date: date):
        """Sets the entry_date of this RegisterEntry.

        The date on which the entry was added to the register.  # noqa: E501

        :param entry_date: The entry_date of this RegisterEntry.
        :type entry_date: date
        """
        if entry_date is None:
            raise ValueError("Invalid value for `entry_date`, must not be `None`")  # noqa: E501

        self._entry_date = entry_date

    @property
    def language_code(self) -> Language:
        """Gets the language_code of this RegisterEntry.


        :return: The language_code of this RegisterEntry.
        :rtype: Language
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code: Language):
        """Sets the language_code of this RegisterEntry.


        :param language_code: The language_code of this RegisterEntry.
        :type language_code: Language
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")  # noqa: E501

        self._language_code = language_code

    @property
    def draft_entry_version(self) -> int:
        """Gets the draft_entry_version of this RegisterEntry.

        The version number of the entry template used to create this entry.  # noqa: E501

        :return: The draft_entry_version of this RegisterEntry.
        :rtype: int
        """
        return self._draft_entry_version

    @draft_entry_version.setter
    def draft_entry_version(self, draft_entry_version: int):
        """Sets the draft_entry_version of this RegisterEntry.

        The version number of the entry template used to create this entry.  # noqa: E501

        :param draft_entry_version: The draft_entry_version of this RegisterEntry.
        :type draft_entry_version: int
        """

        self._draft_entry_version = draft_entry_version

    @property
    def draft_entry_code(self) -> str:
        """Gets the draft_entry_code of this RegisterEntry.

        Identifies the *computerised register entry* (CRE) or *computerised search entry* (CSE) that this entry has used as an entry template.   # noqa: E501

        :return: The draft_entry_code of this RegisterEntry.
        :rtype: str
        """
        return self._draft_entry_code

    @draft_entry_code.setter
    def draft_entry_code(self, draft_entry_code: str):
        """Sets the draft_entry_code of this RegisterEntry.

        Identifies the *computerised register entry* (CRE) or *computerised search entry* (CSE) that this entry has used as an entry template.   # noqa: E501

        :param draft_entry_code: The draft_entry_code of this RegisterEntry.
        :type draft_entry_code: str
        """

        self._draft_entry_code = draft_entry_code

    @property
    def legacy_entry_id(self) -> str:
        """Gets the legacy_entry_id of this RegisterEntry.

        The unique identifier for this entry as used by the legacy database.   # noqa: E501

        :return: The legacy_entry_id of this RegisterEntry.
        :rtype: str
        """
        return self._legacy_entry_id

    @legacy_entry_id.setter
    def legacy_entry_id(self, legacy_entry_id: str):
        """Sets the legacy_entry_id of this RegisterEntry.

        The unique identifier for this entry as used by the legacy database.   # noqa: E501

        :param legacy_entry_id: The legacy_entry_id of this RegisterEntry.
        :type legacy_entry_id: str
        """
        if legacy_entry_id is None:
            raise ValueError("Invalid value for `legacy_entry_id`, must not be `None`")  # noqa: E501

        self._legacy_entry_id = legacy_entry_id

    @property
    def priority_timestamp(self) -> datetime:
        """Gets the priority_timestamp of this RegisterEntry.

        The timestamp representing the date and time that the associated application was entered onto the daylist.   # noqa: E501

        :return: The priority_timestamp of this RegisterEntry.
        :rtype: datetime
        """
        return self._priority_timestamp

    @priority_timestamp.setter
    def priority_timestamp(self, priority_timestamp: datetime):
        """Sets the priority_timestamp of this RegisterEntry.

        The timestamp representing the date and time that the associated application was entered onto the daylist.   # noqa: E501

        :param priority_timestamp: The priority_timestamp of this RegisterEntry.
        :type priority_timestamp: datetime
        """

        self._priority_timestamp = priority_timestamp

    @property
    def entry_text(self) -> str:
        """Gets the entry_text of this RegisterEntry.

        Full entry text as shown on the register.  # noqa: E501

        :return: The entry_text of this RegisterEntry.
        :rtype: str
        """
        return self._entry_text

    @entry_text.setter
    def entry_text(self, entry_text: str):
        """Sets the entry_text of this RegisterEntry.

        Full entry text as shown on the register.  # noqa: E501

        :param entry_text: The entry_text of this RegisterEntry.
        :type entry_text: str
        """

        self._entry_text = entry_text
