# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.application_request_response import ApplicationRequestResponse  # noqa: F401,E501
from swagger_server.models.title import Title  # noqa: F401,E501
from swagger_server.models.topic_id import TopicId  # noqa: F401,E501
from swagger_server.models.validation_success_response import ValidationSuccessResponse  # noqa: F401,E501
from swagger_server import util


class InlineResponse201(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: int=None, title: Title=None, applications: List[ApplicationRequestResponse]=None, topic_id: TopicId=None):  # noqa: E501
        """InlineResponse201 - a model defined in Swagger

        :param status: The status of this InlineResponse201.  # noqa: E501
        :type status: int
        :param title: The title of this InlineResponse201.  # noqa: E501
        :type title: Title
        :param applications: The applications of this InlineResponse201.  # noqa: E501
        :type applications: List[ApplicationRequestResponse]
        :param topic_id: The topic_id of this InlineResponse201.  # noqa: E501
        :type topic_id: TopicId
        """
        self.swagger_types = {
            'status': int,
            'title': Title,
            'applications': List[ApplicationRequestResponse],
            'topic_id': TopicId
        }

        self.attribute_map = {
            'status': 'status',
            'title': 'title',
            'applications': 'applications',
            'topic_id': 'topic_id'
        }
        self._status = status
        self._title = title
        self._applications = applications
        self._topic_id = topic_id

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse201':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_201 of this InlineResponse201.  # noqa: E501
        :rtype: InlineResponse201
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> int:
        """Gets the status of this InlineResponse201.

        The HTTP status code returned by the server with this response.  # noqa: E501

        :return: The status of this InlineResponse201.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this InlineResponse201.

        The HTTP status code returned by the server with this response.  # noqa: E501

        :param status: The status of this InlineResponse201.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def title(self) -> Title:
        """Gets the title of this InlineResponse201.


        :return: The title of this InlineResponse201.
        :rtype: Title
        """
        return self._title

    @title.setter
    def title(self, title: Title):
        """Sets the title of this InlineResponse201.


        :param title: The title of this InlineResponse201.
        :type title: Title
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def applications(self) -> List[ApplicationRequestResponse]:
        """Gets the applications of this InlineResponse201.


        :return: The applications of this InlineResponse201.
        :rtype: List[ApplicationRequestResponse]
        """
        return self._applications

    @applications.setter
    def applications(self, applications: List[ApplicationRequestResponse]):
        """Sets the applications of this InlineResponse201.


        :param applications: The applications of this InlineResponse201.
        :type applications: List[ApplicationRequestResponse]
        """

        self._applications = applications

    @property
    def topic_id(self) -> TopicId:
        """Gets the topic_id of this InlineResponse201.


        :return: The topic_id of this InlineResponse201.
        :rtype: TopicId
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id: TopicId):
        """Sets the topic_id of this InlineResponse201.


        :param topic_id: The topic_id of this InlineResponse201.
        :type topic_id: TopicId
        """

        self._topic_id = topic_id
