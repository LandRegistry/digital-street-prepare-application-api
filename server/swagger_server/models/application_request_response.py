# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.validation_issue import ValidationIssue  # noqa: F401,E501
from swagger_server.models.validation_success import ValidationSuccess  # noqa: F401,E501
from swagger_server import util


class ApplicationRequestResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, application_type: str=None, validation_issues: List[ValidationIssue]=None, validation_successes: List[ValidationSuccess]=None):  # noqa: E501
        """ApplicationRequestResponse - a model defined in Swagger

        :param application_type: The application_type of this ApplicationRequestResponse.  # noqa: E501
        :type application_type: str
        :param validation_issues: The validation_issues of this ApplicationRequestResponse.  # noqa: E501
        :type validation_issues: List[ValidationIssue]
        :param validation_successes: The validation_successes of this ApplicationRequestResponse.  # noqa: E501
        :type validation_successes: List[ValidationSuccess]
        """
        self.swagger_types = {
            'application_type': str,
            'validation_issues': List[ValidationIssue],
            'validation_successes': List[ValidationSuccess]
        }

        self.attribute_map = {
            'application_type': 'application_type',
            'validation_issues': 'validation_issues',
            'validation_successes': 'validation_successes'
        }
        self._application_type = application_type
        self._validation_issues = validation_issues
        self._validation_successes = validation_successes

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationRequestResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationRequestResponse of this ApplicationRequestResponse.  # noqa: E501
        :rtype: ApplicationRequestResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type(self) -> str:
        """Gets the application_type of this ApplicationRequestResponse.


        :return: The application_type of this ApplicationRequestResponse.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type: str):
        """Sets the application_type of this ApplicationRequestResponse.


        :param application_type: The application_type of this ApplicationRequestResponse.
        :type application_type: str
        """
        allowed_values = ["transfer_of_whole", "creation_of_new_charge"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def validation_issues(self) -> List[ValidationIssue]:
        """Gets the validation_issues of this ApplicationRequestResponse.


        :return: The validation_issues of this ApplicationRequestResponse.
        :rtype: List[ValidationIssue]
        """
        return self._validation_issues

    @validation_issues.setter
    def validation_issues(self, validation_issues: List[ValidationIssue]):
        """Sets the validation_issues of this ApplicationRequestResponse.


        :param validation_issues: The validation_issues of this ApplicationRequestResponse.
        :type validation_issues: List[ValidationIssue]
        """
        if validation_issues is None:
            raise ValueError("Invalid value for `validation_issues`, must not be `None`")  # noqa: E501

        self._validation_issues = validation_issues

    @property
    def validation_successes(self) -> List[ValidationSuccess]:
        """Gets the validation_successes of this ApplicationRequestResponse.


        :return: The validation_successes of this ApplicationRequestResponse.
        :rtype: List[ValidationSuccess]
        """
        return self._validation_successes

    @validation_successes.setter
    def validation_successes(self, validation_successes: List[ValidationSuccess]):
        """Sets the validation_successes of this ApplicationRequestResponse.


        :param validation_successes: The validation_successes of this ApplicationRequestResponse.
        :type validation_successes: List[ValidationSuccess]
        """
        if validation_successes is None:
            raise ValueError("Invalid value for `validation_successes`, must not be `None`")  # noqa: E501

        self._validation_successes = validation_successes
