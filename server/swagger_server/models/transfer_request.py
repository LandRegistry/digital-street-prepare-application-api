# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.application_request import ApplicationRequest  # noqa: F401,E501
from swagger_server.models.declaration_of_trust import DeclarationOfTrust  # noqa: F401,E501
from swagger_server.models.execution import Execution  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.proprietor import Proprietor  # noqa: F401,E501
from swagger_server.models.title_number import TitleNumber  # noqa: F401,E501
from swagger_server.models.transfer_request_consideration import TransferRequestConsideration  # noqa: F401,E501
from swagger_server.models.transfer_request_guarantee import TransferRequestGuarantee  # noqa: F401,E501
from swagger_server import util


class TransferRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title_number: TitleNumber=None, application_type: str=None, additional_provisions: List[Object]=None, consideration: TransferRequestConsideration=None, declaration_of_trust: DeclarationOfTrust=None, execution: Execution=None, guarantee: TransferRequestGuarantee=None, transfer_date: date=None, transferrees: List[Proprietor]=None, transferrors: List[Object]=None, sdlt_transaction_ref: str=None, consent_to_discharge: bool=None):  # noqa: E501
        """TransferRequest - a model defined in Swagger

        :param title_number: The title_number of this TransferRequest.  # noqa: E501
        :type title_number: TitleNumber
        :param application_type: The application_type of this TransferRequest.  # noqa: E501
        :type application_type: str
        :param additional_provisions: The additional_provisions of this TransferRequest.  # noqa: E501
        :type additional_provisions: List[Object]
        :param consideration: The consideration of this TransferRequest.  # noqa: E501
        :type consideration: TransferRequestConsideration
        :param declaration_of_trust: The declaration_of_trust of this TransferRequest.  # noqa: E501
        :type declaration_of_trust: DeclarationOfTrust
        :param execution: The execution of this TransferRequest.  # noqa: E501
        :type execution: Execution
        :param guarantee: The guarantee of this TransferRequest.  # noqa: E501
        :type guarantee: TransferRequestGuarantee
        :param transfer_date: The transfer_date of this TransferRequest.  # noqa: E501
        :type transfer_date: date
        :param transferrees: The transferrees of this TransferRequest.  # noqa: E501
        :type transferrees: List[Proprietor]
        :param transferrors: The transferrors of this TransferRequest.  # noqa: E501
        :type transferrors: List[Object]
        :param sdlt_transaction_ref: The sdlt_transaction_ref of this TransferRequest.  # noqa: E501
        :type sdlt_transaction_ref: str
        :param consent_to_discharge: The consent_to_discharge of this TransferRequest.  # noqa: E501
        :type consent_to_discharge: bool
        """
        self.swagger_types = {
            'title_number': TitleNumber,
            'application_type': str,
            'additional_provisions': List[Object],
            'consideration': TransferRequestConsideration,
            'declaration_of_trust': DeclarationOfTrust,
            'execution': Execution,
            'guarantee': TransferRequestGuarantee,
            'transfer_date': date,
            'transferrees': List[Proprietor],
            'transferrors': List[Object],
            'sdlt_transaction_ref': str,
            'consent_to_discharge': bool
        }

        self.attribute_map = {
            'title_number': 'title_number',
            'application_type': 'application_type',
            'additional_provisions': 'additional_provisions',
            'consideration': 'consideration',
            'declaration_of_trust': 'declaration_of_trust',
            'execution': 'execution',
            'guarantee': 'guarantee',
            'transfer_date': 'transfer_date',
            'transferrees': 'transferrees',
            'transferrors': 'transferrors',
            'sdlt_transaction_ref': 'sdlt_transaction_ref',
            'consent_to_discharge': 'consent_to_discharge'
        }
        self._title_number = title_number
        self._application_type = application_type
        self._additional_provisions = additional_provisions
        self._consideration = consideration
        self._declaration_of_trust = declaration_of_trust
        self._execution = execution
        self._guarantee = guarantee
        self._transfer_date = transfer_date
        self._transferrees = transferrees
        self._transferrors = transferrors
        self._sdlt_transaction_ref = sdlt_transaction_ref
        self._consent_to_discharge = consent_to_discharge

    @classmethod
    def from_dict(cls, dikt) -> 'TransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TransferRequest of this TransferRequest.  # noqa: E501
        :rtype: TransferRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title_number(self) -> TitleNumber:
        """Gets the title_number of this TransferRequest.


        :return: The title_number of this TransferRequest.
        :rtype: TitleNumber
        """
        return self._title_number

    @title_number.setter
    def title_number(self, title_number: TitleNumber):
        """Sets the title_number of this TransferRequest.


        :param title_number: The title_number of this TransferRequest.
        :type title_number: TitleNumber
        """
        if title_number is None:
            raise ValueError("Invalid value for `title_number`, must not be `None`")  # noqa: E501

        self._title_number = title_number

    @property
    def application_type(self) -> str:
        """Gets the application_type of this TransferRequest.


        :return: The application_type of this TransferRequest.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type: str):
        """Sets the application_type of this TransferRequest.


        :param application_type: The application_type of this TransferRequest.
        :type application_type: str
        """
        allowed_values = ["transfer_of_whole"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def additional_provisions(self) -> List[Object]:
        """Gets the additional_provisions of this TransferRequest.

        any required or permitted statement, certificate or application and any agreed covenants, declarations and so on.  # noqa: E501

        :return: The additional_provisions of this TransferRequest.
        :rtype: List[Object]
        """
        return self._additional_provisions

    @additional_provisions.setter
    def additional_provisions(self, additional_provisions: List[Object]):
        """Sets the additional_provisions of this TransferRequest.

        any required or permitted statement, certificate or application and any agreed covenants, declarations and so on.  # noqa: E501

        :param additional_provisions: The additional_provisions of this TransferRequest.
        :type additional_provisions: List[Object]
        """

        self._additional_provisions = additional_provisions

    @property
    def consideration(self) -> TransferRequestConsideration:
        """Gets the consideration of this TransferRequest.


        :return: The consideration of this TransferRequest.
        :rtype: TransferRequestConsideration
        """
        return self._consideration

    @consideration.setter
    def consideration(self, consideration: TransferRequestConsideration):
        """Sets the consideration of this TransferRequest.


        :param consideration: The consideration of this TransferRequest.
        :type consideration: TransferRequestConsideration
        """

        self._consideration = consideration

    @property
    def declaration_of_trust(self) -> DeclarationOfTrust:
        """Gets the declaration_of_trust of this TransferRequest.


        :return: The declaration_of_trust of this TransferRequest.
        :rtype: DeclarationOfTrust
        """
        return self._declaration_of_trust

    @declaration_of_trust.setter
    def declaration_of_trust(self, declaration_of_trust: DeclarationOfTrust):
        """Sets the declaration_of_trust of this TransferRequest.


        :param declaration_of_trust: The declaration_of_trust of this TransferRequest.
        :type declaration_of_trust: DeclarationOfTrust
        """

        self._declaration_of_trust = declaration_of_trust

    @property
    def execution(self) -> Execution:
        """Gets the execution of this TransferRequest.


        :return: The execution of this TransferRequest.
        :rtype: Execution
        """
        return self._execution

    @execution.setter
    def execution(self, execution: Execution):
        """Sets the execution of this TransferRequest.


        :param execution: The execution of this TransferRequest.
        :type execution: Execution
        """

        self._execution = execution

    @property
    def guarantee(self) -> TransferRequestGuarantee:
        """Gets the guarantee of this TransferRequest.


        :return: The guarantee of this TransferRequest.
        :rtype: TransferRequestGuarantee
        """
        return self._guarantee

    @guarantee.setter
    def guarantee(self, guarantee: TransferRequestGuarantee):
        """Sets the guarantee of this TransferRequest.


        :param guarantee: The guarantee of this TransferRequest.
        :type guarantee: TransferRequestGuarantee
        """

        self._guarantee = guarantee

    @property
    def transfer_date(self) -> date:
        """Gets the transfer_date of this TransferRequest.

        The date on which the entry was added to the register.  # noqa: E501

        :return: The transfer_date of this TransferRequest.
        :rtype: date
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date: date):
        """Sets the transfer_date of this TransferRequest.

        The date on which the entry was added to the register.  # noqa: E501

        :param transfer_date: The transfer_date of this TransferRequest.
        :type transfer_date: date
        """

        self._transfer_date = transfer_date

    @property
    def transferrees(self) -> List[Proprietor]:
        """Gets the transferrees of this TransferRequest.


        :return: The transferrees of this TransferRequest.
        :rtype: List[Proprietor]
        """
        return self._transferrees

    @transferrees.setter
    def transferrees(self, transferrees: List[Proprietor]):
        """Sets the transferrees of this TransferRequest.


        :param transferrees: The transferrees of this TransferRequest.
        :type transferrees: List[Proprietor]
        """

        self._transferrees = transferrees

    @property
    def transferrors(self) -> List[Object]:
        """Gets the transferrors of this TransferRequest.


        :return: The transferrors of this TransferRequest.
        :rtype: List[Object]
        """
        return self._transferrors

    @transferrors.setter
    def transferrors(self, transferrors: List[Object]):
        """Sets the transferrors of this TransferRequest.


        :param transferrors: The transferrors of this TransferRequest.
        :type transferrors: List[Object]
        """

        self._transferrors = transferrors

    @property
    def sdlt_transaction_ref(self) -> str:
        """Gets the sdlt_transaction_ref of this TransferRequest.

        The HMRC-provided transaction reference for the completed SDLT payment  # noqa: E501

        :return: The sdlt_transaction_ref of this TransferRequest.
        :rtype: str
        """
        return self._sdlt_transaction_ref

    @sdlt_transaction_ref.setter
    def sdlt_transaction_ref(self, sdlt_transaction_ref: str):
        """Sets the sdlt_transaction_ref of this TransferRequest.

        The HMRC-provided transaction reference for the completed SDLT payment  # noqa: E501

        :param sdlt_transaction_ref: The sdlt_transaction_ref of this TransferRequest.
        :type sdlt_transaction_ref: str
        """

        self._sdlt_transaction_ref = sdlt_transaction_ref

    @property
    def consent_to_discharge(self) -> bool:
        """Gets the consent_to_discharge of this TransferRequest.

        Assurance that the lender has consented to remove the charge  # noqa: E501

        :return: The consent_to_discharge of this TransferRequest.
        :rtype: bool
        """
        return self._consent_to_discharge

    @consent_to_discharge.setter
    def consent_to_discharge(self, consent_to_discharge: bool):
        """Sets the consent_to_discharge of this TransferRequest.

        Assurance that the lender has consented to remove the charge  # noqa: E501

        :param consent_to_discharge: The consent_to_discharge of this TransferRequest.
        :type consent_to_discharge: bool
        """

        self._consent_to_discharge = consent_to_discharge
