# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProprietorAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, description: str=None, type: str=None, care_of_name: str=None, care_of_indicator: bool=None, sequence: int=None, legacy_addr_id: str=None):  # noqa: E501
        """ProprietorAddress - a model defined in Swagger

        :param description: The description of this ProprietorAddress.  # noqa: E501
        :type description: str
        :param type: The type of this ProprietorAddress.  # noqa: E501
        :type type: str
        :param care_of_name: The care_of_name of this ProprietorAddress.  # noqa: E501
        :type care_of_name: str
        :param care_of_indicator: The care_of_indicator of this ProprietorAddress.  # noqa: E501
        :type care_of_indicator: bool
        :param sequence: The sequence of this ProprietorAddress.  # noqa: E501
        :type sequence: int
        :param legacy_addr_id: The legacy_addr_id of this ProprietorAddress.  # noqa: E501
        :type legacy_addr_id: str
        """
        self.swagger_types = {
            'description': str,
            'type': str,
            'care_of_name': str,
            'care_of_indicator': bool,
            'sequence': int,
            'legacy_addr_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'type': 'type',
            'care_of_name': 'care_of_name',
            'care_of_indicator': 'care_of_indicator',
            'sequence': 'sequence',
            'legacy_addr_id': 'legacy_addr_id'
        }
        self._description = description
        self._type = type
        self._care_of_name = care_of_name
        self._care_of_indicator = care_of_indicator
        self._sequence = sequence
        self._legacy_addr_id = legacy_addr_id

    @classmethod
    def from_dict(cls, dikt) -> 'ProprietorAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProprietorAddress of this ProprietorAddress.  # noqa: E501
        :rtype: ProprietorAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this ProprietorAddress.

        Full description of the property with its constituent parts combined.  # noqa: E501

        :return: The description of this ProprietorAddress.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProprietorAddress.

        Full description of the property with its constituent parts combined.  # noqa: E501

        :param description: The description of this ProprietorAddress.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this ProprietorAddress.

        The type of address.  # noqa: E501

        :return: The type of this ProprietorAddress.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ProprietorAddress.

        The type of address.  # noqa: E501

        :param type: The type of this ProprietorAddress.
        :type type: str
        """
        allowed_values = ["uk", "foreign", "bfpo", "dx", "electronic", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def care_of_name(self) -> str:
        """Gets the care_of_name of this ProprietorAddress.

        Name of person, persons or organisation. Used in connection with an address which is 'care of', 'poste restante' or 'accomodation address'.   # noqa: E501

        :return: The care_of_name of this ProprietorAddress.
        :rtype: str
        """
        return self._care_of_name

    @care_of_name.setter
    def care_of_name(self, care_of_name: str):
        """Sets the care_of_name of this ProprietorAddress.

        Name of person, persons or organisation. Used in connection with an address which is 'care of', 'poste restante' or 'accomodation address'.   # noqa: E501

        :param care_of_name: The care_of_name of this ProprietorAddress.
        :type care_of_name: str
        """

        self._care_of_name = care_of_name

    @property
    def care_of_indicator(self) -> bool:
        """Gets the care_of_indicator of this ProprietorAddress.

        Indicates whether or not an address is a 'care of', 'poste restante' or 'accomodation address'. The address doesn't have to have a care_of_name if this is true.   # noqa: E501

        :return: The care_of_indicator of this ProprietorAddress.
        :rtype: bool
        """
        return self._care_of_indicator

    @care_of_indicator.setter
    def care_of_indicator(self, care_of_indicator: bool):
        """Sets the care_of_indicator of this ProprietorAddress.

        Indicates whether or not an address is a 'care of', 'poste restante' or 'accomodation address'. The address doesn't have to have a care_of_name if this is true.   # noqa: E501

        :param care_of_indicator: The care_of_indicator of this ProprietorAddress.
        :type care_of_indicator: bool
        """

        self._care_of_indicator = care_of_indicator

    @property
    def sequence(self) -> int:
        """Gets the sequence of this ProprietorAddress.

        The position of the address within the context of a single proprietor.  # noqa: E501

        :return: The sequence of this ProprietorAddress.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence: int):
        """Sets the sequence of this ProprietorAddress.

        The position of the address within the context of a single proprietor.  # noqa: E501

        :param sequence: The sequence of this ProprietorAddress.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def legacy_addr_id(self) -> str:
        """Gets the legacy_addr_id of this ProprietorAddress.

        The legacy identifier for the address.  # noqa: E501

        :return: The legacy_addr_id of this ProprietorAddress.
        :rtype: str
        """
        return self._legacy_addr_id

    @legacy_addr_id.setter
    def legacy_addr_id(self, legacy_addr_id: str):
        """Sets the legacy_addr_id of this ProprietorAddress.

        The legacy identifier for the address.  # noqa: E501

        :param legacy_addr_id: The legacy_addr_id of this ProprietorAddress.
        :type legacy_addr_id: str
        """
        if legacy_addr_id is None:
            raise ValueError("Invalid value for `legacy_addr_id`, must not be `None`")  # noqa: E501

        self._legacy_addr_id = legacy_addr_id
