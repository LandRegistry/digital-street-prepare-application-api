# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, description: str=None, type: str=None, legacy_addr_id: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param description: The description of this Address.  # noqa: E501
        :type description: str
        :param type: The type of this Address.  # noqa: E501
        :type type: str
        :param legacy_addr_id: The legacy_addr_id of this Address.  # noqa: E501
        :type legacy_addr_id: str
        """
        self.swagger_types = {
            'description': str,
            'type': str,
            'legacy_addr_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'type': 'type',
            'legacy_addr_id': 'legacy_addr_id'
        }
        self._description = description
        self._type = type
        self._legacy_addr_id = legacy_addr_id

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this Address.

        Full description of the address with its constituent parts combined.  # noqa: E501

        :return: The description of this Address.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Address.

        Full description of the address with its constituent parts combined.  # noqa: E501

        :param description: The description of this Address.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this Address.

        The type of address.  # noqa: E501

        :return: The type of this Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Address.

        The type of address.  # noqa: E501

        :param type: The type of this Address.
        :type type: str
        """
        allowed_values = ["uk", "foreign", "bfpo", "dx", "electronic", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def legacy_addr_id(self) -> str:
        """Gets the legacy_addr_id of this Address.

        The legacy identifier for the address.  # noqa: E501

        :return: The legacy_addr_id of this Address.
        :rtype: str
        """
        return self._legacy_addr_id

    @legacy_addr_id.setter
    def legacy_addr_id(self, legacy_addr_id: str):
        """Sets the legacy_addr_id of this Address.

        The legacy identifier for the address.  # noqa: E501

        :param legacy_addr_id: The legacy_addr_id of this Address.
        :type legacy_addr_id: str
        """
        if legacy_addr_id is None:
            raise ValueError("Invalid value for `legacy_addr_id`, must not be `None`")  # noqa: E501

        self._legacy_addr_id = legacy_addr_id
