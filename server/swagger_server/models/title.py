# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.application_reference import ApplicationReference  # noqa: F401,E501
from swagger_server.models.class_of_title import ClassOfTitle  # noqa: F401,E501
from swagger_server.models.estate_interest import EstateInterest  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server.models.one_of_title_commonhold_type import OneOfTitleCommonholdType
from swagger_server.models.tenure import Tenure  # noqa: F401,E501
from swagger_server.models.title_entries import TitleEntries  # noqa: F401,E501
from swagger_server.models.title_number import TitleNumber  # noqa: F401,E501
from swagger_server.models.title_properties import TitleProperties  # noqa: F401,E501
from swagger_server.models.title_proprietors import TitleProprietors  # noqa: F401,E501
from swagger_server.models.title_status_info import TitleStatusInfo  # noqa: F401,E501
from swagger_server import util


class Title(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, title_number: TitleNumber=None, tenure: Tenure=None, class_of_title: ClassOfTitle=None, status: TitleStatusInfo=None, edition_date: date=None, pending_applications: List[ApplicationReference]=None, application_reference: ApplicationReference=None, application_timestamp: datetime=None, welsh: bool=None, caution_against_first_registration: bool=None, continuation_title_number: str=None, previous_title_number: str=None, commonhold_type: OneOfTitleCommonholdType=None, estate_interest: EstateInterest=None, entries: TitleEntries=None, properties: TitleProperties=None, proprietors: TitleProprietors=None):  # noqa: E501
        """Title - a model defined in Swagger

        :param title_number: The title_number of this Title.  # noqa: E501
        :type title_number: TitleNumber
        :param tenure: The tenure of this Title.  # noqa: E501
        :type tenure: Tenure
        :param class_of_title: The class_of_title of this Title.  # noqa: E501
        :type class_of_title: ClassOfTitle
        :param status: The status of this Title.  # noqa: E501
        :type status: TitleStatusInfo
        :param edition_date: The edition_date of this Title.  # noqa: E501
        :type edition_date: date
        :param pending_applications: The pending_applications of this Title.  # noqa: E501
        :type pending_applications: List[ApplicationReference]
        :param application_reference: The application_reference of this Title.  # noqa: E501
        :type application_reference: ApplicationReference
        :param application_timestamp: The application_timestamp of this Title.  # noqa: E501
        :type application_timestamp: datetime
        :param welsh: The welsh of this Title.  # noqa: E501
        :type welsh: bool
        :param caution_against_first_registration: The caution_against_first_registration of this Title.  # noqa: E501
        :type caution_against_first_registration: bool
        :param continuation_title_number: The continuation_title_number of this Title.  # noqa: E501
        :type continuation_title_number: str
        :param previous_title_number: The previous_title_number of this Title.  # noqa: E501
        :type previous_title_number: str
        :param commonhold_type: The commonhold_type of this Title.  # noqa: E501
        :type commonhold_type: OneOfTitleCommonholdType
        :param estate_interest: The estate_interest of this Title.  # noqa: E501
        :type estate_interest: EstateInterest
        :param entries: The entries of this Title.  # noqa: E501
        :type entries: TitleEntries
        :param properties: The properties of this Title.  # noqa: E501
        :type properties: TitleProperties
        :param proprietors: The proprietors of this Title.  # noqa: E501
        :type proprietors: TitleProprietors
        """
        self.swagger_types = {
            'title_number': TitleNumber,
            'tenure': Tenure,
            'class_of_title': ClassOfTitle,
            'status': TitleStatusInfo,
            'edition_date': date,
            'pending_applications': List[ApplicationReference],
            'application_reference': ApplicationReference,
            'application_timestamp': datetime,
            'welsh': bool,
            'caution_against_first_registration': bool,
            'continuation_title_number': str,
            'previous_title_number': str,
            'commonhold_type': OneOfTitleCommonholdType,
            'estate_interest': EstateInterest,
            'entries': TitleEntries,
            'properties': TitleProperties,
            'proprietors': TitleProprietors
        }

        self.attribute_map = {
            'title_number': 'title_number',
            'tenure': 'tenure',
            'class_of_title': 'class_of_title',
            'status': 'status',
            'edition_date': 'edition_date',
            'pending_applications': 'pending_applications',
            'application_reference': 'application_reference',
            'application_timestamp': 'application_timestamp',
            'welsh': 'welsh',
            'caution_against_first_registration': 'caution_against_first_registration',
            'continuation_title_number': 'continuation_title_number',
            'previous_title_number': 'previous_title_number',
            'commonhold_type': 'commonhold_type',
            'estate_interest': 'estate_interest',
            'entries': 'entries',
            'properties': 'properties',
            'proprietors': 'proprietors'
        }
        self._title_number = title_number
        self._tenure = tenure
        self._class_of_title = class_of_title
        self._status = status
        self._edition_date = edition_date
        self._pending_applications = pending_applications
        self._application_reference = application_reference
        self._application_timestamp = application_timestamp
        self._welsh = welsh
        self._caution_against_first_registration = caution_against_first_registration
        self._continuation_title_number = continuation_title_number
        self._previous_title_number = previous_title_number
        self._commonhold_type = commonhold_type
        self._estate_interest = estate_interest
        self._entries = entries
        self._properties = properties
        self._proprietors = proprietors

    @classmethod
    def from_dict(cls, dikt) -> 'Title':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Title of this Title.  # noqa: E501
        :rtype: Title
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title_number(self) -> TitleNumber:
        """Gets the title_number of this Title.


        :return: The title_number of this Title.
        :rtype: TitleNumber
        """
        return self._title_number

    @title_number.setter
    def title_number(self, title_number: TitleNumber):
        """Sets the title_number of this Title.


        :param title_number: The title_number of this Title.
        :type title_number: TitleNumber
        """
        if title_number is None:
            raise ValueError("Invalid value for `title_number`, must not be `None`")  # noqa: E501

        self._title_number = title_number

    @property
    def tenure(self) -> Tenure:
        """Gets the tenure of this Title.


        :return: The tenure of this Title.
        :rtype: Tenure
        """
        return self._tenure

    @tenure.setter
    def tenure(self, tenure: Tenure):
        """Sets the tenure of this Title.


        :param tenure: The tenure of this Title.
        :type tenure: Tenure
        """

        self._tenure = tenure

    @property
    def class_of_title(self) -> ClassOfTitle:
        """Gets the class_of_title of this Title.


        :return: The class_of_title of this Title.
        :rtype: ClassOfTitle
        """
        return self._class_of_title

    @class_of_title.setter
    def class_of_title(self, class_of_title: ClassOfTitle):
        """Sets the class_of_title of this Title.


        :param class_of_title: The class_of_title of this Title.
        :type class_of_title: ClassOfTitle
        """

        self._class_of_title = class_of_title

    @property
    def status(self) -> TitleStatusInfo:
        """Gets the status of this Title.


        :return: The status of this Title.
        :rtype: TitleStatusInfo
        """
        return self._status

    @status.setter
    def status(self, status: TitleStatusInfo):
        """Sets the status of this Title.


        :param status: The status of this Title.
        :type status: TitleStatusInfo
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def edition_date(self) -> date:
        """Gets the edition_date of this Title.

        The date on which the current version of the register was published.   # noqa: E501

        :return: The edition_date of this Title.
        :rtype: date
        """
        return self._edition_date

    @edition_date.setter
    def edition_date(self, edition_date: date):
        """Sets the edition_date of this Title.

        The date on which the current version of the register was published.   # noqa: E501

        :param edition_date: The edition_date of this Title.
        :type edition_date: date
        """

        self._edition_date = edition_date

    @property
    def pending_applications(self) -> List[ApplicationReference]:
        """Gets the pending_applications of this Title.


        :return: The pending_applications of this Title.
        :rtype: List[ApplicationReference]
        """
        return self._pending_applications

    @pending_applications.setter
    def pending_applications(self, pending_applications: List[ApplicationReference]):
        """Sets the pending_applications of this Title.


        :param pending_applications: The pending_applications of this Title.
        :type pending_applications: List[ApplicationReference]
        """
        if pending_applications is None:
            raise ValueError("Invalid value for `pending_applications`, must not be `None`")  # noqa: E501

        self._pending_applications = pending_applications

    @property
    def application_reference(self) -> ApplicationReference:
        """Gets the application_reference of this Title.


        :return: The application_reference of this Title.
        :rtype: ApplicationReference
        """
        return self._application_reference

    @application_reference.setter
    def application_reference(self, application_reference: ApplicationReference):
        """Sets the application_reference of this Title.


        :param application_reference: The application_reference of this Title.
        :type application_reference: ApplicationReference
        """
        if application_reference is None:
            raise ValueError("Invalid value for `application_reference`, must not be `None`")  # noqa: E501

        self._application_reference = application_reference

    @property
    def application_timestamp(self) -> datetime:
        """Gets the application_timestamp of this Title.

        The date and time that the latest application to make a substantive change to the register for this title was submitted.   # noqa: E501

        :return: The application_timestamp of this Title.
        :rtype: datetime
        """
        return self._application_timestamp

    @application_timestamp.setter
    def application_timestamp(self, application_timestamp: datetime):
        """Sets the application_timestamp of this Title.

        The date and time that the latest application to make a substantive change to the register for this title was submitted.   # noqa: E501

        :param application_timestamp: The application_timestamp of this Title.
        :type application_timestamp: datetime
        """

        self._application_timestamp = application_timestamp

    @property
    def welsh(self) -> bool:
        """Gets the welsh of this Title.

        Indicates that the title falls under the Welsh administration area.   # noqa: E501

        :return: The welsh of this Title.
        :rtype: bool
        """
        return self._welsh

    @welsh.setter
    def welsh(self, welsh: bool):
        """Sets the welsh of this Title.

        Indicates that the title falls under the Welsh administration area.   # noqa: E501

        :param welsh: The welsh of this Title.
        :type welsh: bool
        """

        self._welsh = welsh

    @property
    def caution_against_first_registration(self) -> bool:
        """Gets the caution_against_first_registration of this Title.

        Boolean value stating whether this title is a caution against first registration. Cautions against dealings are excluded since they are purely an application data item.   # noqa: E501

        :return: The caution_against_first_registration of this Title.
        :rtype: bool
        """
        return self._caution_against_first_registration

    @caution_against_first_registration.setter
    def caution_against_first_registration(self, caution_against_first_registration: bool):
        """Sets the caution_against_first_registration of this Title.

        Boolean value stating whether this title is a caution against first registration. Cautions against dealings are excluded since they are purely an application data item.   # noqa: E501

        :param caution_against_first_registration: The caution_against_first_registration of this Title.
        :type caution_against_first_registration: bool
        """
        if caution_against_first_registration is None:
            raise ValueError("Invalid value for `caution_against_first_registration`, must not be `None`")  # noqa: E501

        self._caution_against_first_registration = caution_against_first_registration

    @property
    def continuation_title_number(self) -> str:
        """Gets the continuation_title_number of this Title.

        Title number under which a closed title has been continued.   # noqa: E501

        :return: The continuation_title_number of this Title.
        :rtype: str
        """
        return self._continuation_title_number

    @continuation_title_number.setter
    def continuation_title_number(self, continuation_title_number: str):
        """Sets the continuation_title_number of this Title.

        Title number under which a closed title has been continued.   # noqa: E501

        :param continuation_title_number: The continuation_title_number of this Title.
        :type continuation_title_number: str
        """

        self._continuation_title_number = continuation_title_number

    @property
    def previous_title_number(self) -> str:
        """Gets the previous_title_number of this Title.

        Title number that was previously allocated to a property.   # noqa: E501

        :return: The previous_title_number of this Title.
        :rtype: str
        """
        return self._previous_title_number

    @previous_title_number.setter
    def previous_title_number(self, previous_title_number: str):
        """Sets the previous_title_number of this Title.

        Title number that was previously allocated to a property.   # noqa: E501

        :param previous_title_number: The previous_title_number of this Title.
        :type previous_title_number: str
        """

        self._previous_title_number = previous_title_number

    @property
    def commonhold_type(self) -> OneOfTitleCommonholdType:
        """Gets the commonhold_type of this Title.


        :return: The commonhold_type of this Title.
        :rtype: OneOfTitleCommonholdType
        """
        return self._commonhold_type

    @commonhold_type.setter
    def commonhold_type(self, commonhold_type: OneOfTitleCommonholdType):
        """Sets the commonhold_type of this Title.


        :param commonhold_type: The commonhold_type of this Title.
        :type commonhold_type: OneOfTitleCommonholdType
        """

        self._commonhold_type = commonhold_type

    @property
    def estate_interest(self) -> EstateInterest:
        """Gets the estate_interest of this Title.


        :return: The estate_interest of this Title.
        :rtype: EstateInterest
        """
        return self._estate_interest

    @estate_interest.setter
    def estate_interest(self, estate_interest: EstateInterest):
        """Sets the estate_interest of this Title.


        :param estate_interest: The estate_interest of this Title.
        :type estate_interest: EstateInterest
        """

        self._estate_interest = estate_interest

    @property
    def entries(self) -> TitleEntries:
        """Gets the entries of this Title.


        :return: The entries of this Title.
        :rtype: TitleEntries
        """
        return self._entries

    @entries.setter
    def entries(self, entries: TitleEntries):
        """Sets the entries of this Title.


        :param entries: The entries of this Title.
        :type entries: TitleEntries
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    @property
    def properties(self) -> TitleProperties:
        """Gets the properties of this Title.


        :return: The properties of this Title.
        :rtype: TitleProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties: TitleProperties):
        """Sets the properties of this Title.


        :param properties: The properties of this Title.
        :type properties: TitleProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def proprietors(self) -> TitleProprietors:
        """Gets the proprietors of this Title.


        :return: The proprietors of this Title.
        :rtype: TitleProprietors
        """
        return self._proprietors

    @proprietors.setter
    def proprietors(self, proprietors: TitleProprietors):
        """Sets the proprietors of this Title.


        :param proprietors: The proprietors of this Title.
        :type proprietors: TitleProprietors
        """
        if proprietors is None:
            raise ValueError("Invalid value for `proprietors`, must not be `None`")  # noqa: E501

        self._proprietors = proprietors
